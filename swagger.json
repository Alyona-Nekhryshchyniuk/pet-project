{
    "openapi": "3.0.3",
    "info": {
        "version": "1.0.0",
        "title": "Pet project",
        "description": "restApi for pet project",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "consumes": [
        "application/json",
        "multipart/form-data"
    ],
    "produces": [
        "application/json"
    ],
    "servers": [
        {
            "url": "http://localhost:3000"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Authorization endpoints"
        },
        {
            "name": "Pets",
            "description": "Pets endpoints"
        }
    ],
    "paths": {
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User registration",
                "parameters": [],
                "security": [],
                "requestBody": {
                    "description": "Registration's object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid request body)",
                        "content": {}
                    },
                    "409": {
                        "description": "Provided email already exists",
                        "content": {}
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user",
                "parameters": [],
                "security": [],
                "requestBody": {
                    "description": "Authenticates a user with the specified email and password",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authenticates a user with the specified email and password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid request body)",
                        "content": {}
                    },
                    "401": {
                        "description": "Invalid email or password"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            }
        },
        "/api/auth/update": {
            "patch": {
                "tags": [
                    "Auth"
                ],
                "summary": "Update User information",
                "description": "Update user information",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Update user information",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/userUpdateRequest"
                            }
                        }
                    }
                },
                "consumes": [
                    "multipart/form-data"
                ],
                "responses": {
                    "200": {
                        "description": "updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/userUpdateResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found",
                        "content": {}
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/current": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get current user",
                "description": "Returns information about the currently authenticated user.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "description": "The email address of the authenticated user"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/notice": {
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Get all pets",
                "description": "Get all pets",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query for pet title",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter pets by gender",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/petResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400":{
                        "description":"Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Pets"
                ],
                "summary": "Add a notice",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/petRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "schema": {
                                "$ref": "#/components/schemas/petResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500":{
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/notice/sell": {
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Get pets for sale",
                "description": "Get pets for sale",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query for pet title",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter pets by gender",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/petResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/notice/lost": {
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Get lost/found pets",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query for pet title",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter pets by gender",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/petResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/notice/inGoodHands": {
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Get pets available for adoption",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query for pet title",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter pets by gender",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/petResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "api/notice/{id}": {
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Get a pet by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the pet",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/petResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pets"
                ],
                "summary": "Delete notice by ID",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the notice",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/petResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "RegistrationRequest": {
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password",
                        "example": "qwerty123"
                    }
                }
            },
            "RegisterationResponse": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "userID": {
                        "type": "string",
                        "description": "User's id",
                        "format": "nanoid",
                        "example": "645ce52c201bd44a4b70a2a4"
                    }
                }
            },
            "LoginRequest": {
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password",
                        "example": "qwerty123"
                    }
                }
            },
            "LoginResponse": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email",
                        "format": "email"
                    },
                    "token": {
                        "type": "string",
                        "description": "Access token for authorized requests",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxMjA0NmRkMzFjY2Q2MjY1NTA3OTJhZiIsImlhdCI6MTYyMzQxNjM0NywiZXhwIjoxNjIzNTAxMTQ3fQ.CivKlNzEKhTGp01LxZlx0ObYgbKj6toQv0ksWLP6mS4"
                    }
                }
            },
            "userUpdateRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "avatar": {
                        "type": "string",
                        "format": "binary",
                        "description": "The updated avatar image file"
                    },
                    "name": {
                        "type": "string",
                        "description": "The updated user name"
                    },
                    "city": {
                        "type": "string",
                        "description": "Update user's city"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date"
                    },
                    "phone": {
                        "type": "string",
                        "pattern": "^[0-9]{10}$"
                    }
                }
            },
            "userUpdateResponse": {
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date"
                    },
                    "city": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "verify": {
                        "type": "boolean"
                    }
                }
            },
            "petResponse": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "enum": [
                            "my pet",
                            "sell",
                            "lost-found",
                            "for-free"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "date": {
                        "type": "sring",
                        "format": "date"
                    },
                    "breed": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "sex": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "nullable": true,
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "category": {
                                            "enum": [
                                                "sell",
                                                "lost-found",
                                                "for-free"
                                            ]
                                        }
                                    }
                                },
                                "then": {
                                    "minLength": 1
                                }
                            }
                        ]
                    },
                    "location": {
                        "type": "string",
                        "nullable": true,
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "category": {
                                            "enum": [
                                                "sell",
                                                "lost-found",
                                                "for-free"
                                            ]
                                        }
                                    }
                                },
                                "then": {
                                    "minLength": 1
                                }
                            }
                        ]
                    },
                    "image": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "petRequest": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "enum": [
                            "my pet",
                            "sell",
                            "lost-found",
                            "for-free"
                        ],
                        "default": "sell"
                    },
                    "title": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 16,
                        "pattern": "^.*(?=.*[a-zA-Z]).*$"
                    },
                    "date": {
                        "type": "string",
                        "format": "date"
                    },
                    "breed": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 16
                    },
                    "sex": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "category": {
                                            "enum": [
                                                "sell",
                                                "lost-found",
                                                "for-free"
                                            ]
                                        }
                                    }
                                },
                                "then": {
                                    "minLength": 1
                                }
                            }
                        ]
                    },
                    "location": {
                        "type": "string",
                        "nullable": true,
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "category": {
                                            "enum": [
                                                "sell",
                                                "lost-found",
                                                "for-free"
                                            ]
                                        }
                                    }
                                },
                                "then": {
                                    "minLength": 1
                                }
                            }
                        ]
                    },
                    "price": {
                        "type": "number",
                        "minimum": 0,
                        "nullable": true,
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "category": {
                                            "enum": [
                                                "sell"
                                            ]
                                        }
                                    }
                                },
                                "then": {
                                    "minimum": 1
                                }
                            }
                        ]
                    },
                    "comments": {
                        "type": "string",
                        "minLength": 8,
                        "maxLength": 120
                    },
                    "image": {
                        "type": "string",
                        "format": "binary",
                        "x-example": "base64-encoded-image-string"
                    }
                },
                "required": [
                    "category",
                    "title",
                    "name",
                    "date",
                    "breed"
                ]
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}